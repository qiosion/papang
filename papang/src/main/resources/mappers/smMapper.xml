<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.company.papang.impl.SmMapper">
	<!-- ##################################커뮤니티 글########################################### -->
	<!-- 단건조회 -->
	<select id="getCommunity" parameterType="communityVO"
		resultType="communityVO">
		SELECT *
		FROM COMMUNITY
		WHERE COM_NO = #{com_no}
	</select>

	<!-- 전체조회 -->
	<select id="getCommunityList" resultType="communityVO" >
		SELECT ROWNUM, C.*
		FROM COMMUNITY C
		<where>
			<![CDATA[
				ROWNUM <= 100
			]]>
			<if test="com_category != null and com_category != ''">
				and com_category = #{com_category}
			</if>
		</where>
		ORDER BY C.COM_NO DESC
	</select>

	<!-- 등록 -->
	<insert id="communityFormInsert" parameterType="communityVO">
		INSERT INTO COMMUNITY (
		MBR_ID,
		COM_CATEGORY,
		COM_TITLE,
		COM_CONTENT
		)
		VALUES(
		#{mbr_id},
		#{com_category},
		#{com_title},
		#{com_content}
		)
	</insert>
	
	<!-- 수정 -->
	<update id="communityFormUpdate" parameterType="communityVO">
		UPDATE COMMUNITY SET 
		COM_CATEGORY = #{com_category}, 
		COM_TITLE = #{com_title},
		COM_CONTENT = #{com_content}
		WHERE COM_NO = #{com_no}
	</update>
	
	<!-- 삭제 -->
	<delete id="communityFormDelete" parameterType="communityVO">
		DELETE COMMUNITY WHERE COM_NO = #{com_no} 
	</delete>
	
	<!-- 조회수 증가 -->
	<update id="hitPlus" parameterType="communityVO">
		UPDATE COMMUNITY SET
		COM_HIT = COM_HIT + 1
		WHERE COM_NO = #{com_no}
	</update>
	
	<!-- ##################################커뮤니티 댓글########################################### -->
	<!-- 커뮤니티 댓글 전체조회 -->
	<select id="getCommunityComList" resultType="community_comVO" parameterType="community_comVO">
		SELECT ROWNUM, C.*
		FROM COMMUNITY_COM C
		<where>
			<![CDATA[
				ROWNUM <= 100
			]]>
				and C.COM_NO = #{com_no}
				and C.CC_CATEGORY = '커뮤니티'
		</where>
		ORDER BY C.CC_NO DESC
	</select>
	
	<!-- 커뮤니티 댓글 등록 -->
	<insert id="communityCommentInsert" parameterType="community_comVO">
		INSERT INTO COMMUNITY_COM (
    	MBR_ID,
    	CC_CONTENT,
    	COM_NO,
    	CC_CATEGORY
		)
		VALUES(
		#{mbr_id},
		#{cc_content},
		#{com_no},
		'커뮤니티'
		)
	</insert>

	<!-- ##################################시터########################################### -->
	
	<!-- 전체조회 -->
	<select id="getSitterList" resultType="SitterVOChk">
		SELECT * FROM(
			SELECT ROWNUM, S.SIT_MBR_ID, S.SIT_PAYDAY, replace(TRIM(S.SIT_OFF), ' ', ', ') SIT_OFF, S.SIT_LOC, REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(S.SIT_PAY)), '([0-9]{3})','\1,')), '^,','') AS SIT_PAY, S.SIT_AGE, S.SIT_NOTE, S.SIT_PIC
				,NVL(ROUND((SELECT AVG(SC_RATE) 
	              FROM SITTER_COM A, (SELECT * FROM SITTER_REV WHERE ROWID IN (SELECT MAX(ROWID) FROM SITTER_REV GROUP BY SRV_NO)) B
	              WHERE B.SIT_MBR_ID = S.SIT_MBR_ID AND A.SRV_NO = B.SRV_NO)), 0) RATE,
	              (SELECT COUNT(MBR_ID) FROM REPORT WHERE MBR_ID  = S.SIT_MBR_ID) REPORT
			FROM SITTER S
		)
		<where>
			<![CDATA[
				ROWNUM <= 100
			]]>
			<if test="off_days != null and off_days != ''">
				AND NOT REGEXP_LIKE(SIT_OFF,#{off_days})
			</if>
			<if test="sit_loc != null and sit_loc != '선택하세요'">
				AND SIT_LOC = #{sit_loc}
			</if>
			<if test="minPay != null and minPay != ''">
				AND SIT_PAY >= #{minPay}
			</if>
			<if test="maxPay != null and maxPay != ''">
				<![CDATA[
				AND SIT_PAY <= #{maxPay}
				]]>
			</if>
			<if test="minRate != null and minRate != ''">
				AND (RATE >= #{minRate} or RATE = 0)
			</if>
			<if test="maxRate != null and maxRate != ''">
				<![CDATA[
				AND (RATE <= #{maxRate} or RATE = 0)
				]]>
			</if>
			<if test="report != null and report != ''">
				<![CDATA[
				AND REPORT <= #{report}
				]]>
			</if>
		</where>
	</select>
	
	<!-- 단건조회 -->
	<select id="getSitter" resultType="SitterVOChk">
		SELECT S.SIT_MBR_ID, S.SIT_PAYDAY, replace(TRIM(S.SIT_OFF), ' ', ', ') SIT_OFF, S.SIT_LOC, REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(S.SIT_PAY)), '([0-9]{3})','\1,')), '^,','') AS SIT_PAY, S.SIT_AGE, S.SIT_NOTE, S.SIT_PIC
			,ROUND((SELECT AVG(SC_RATE) 
              FROM SITTER_COM A, (SELECT * FROM SITTER_REV WHERE ROWID IN (SELECT MAX(ROWID) FROM SITTER_REV GROUP BY SRV_NO)) B
              WHERE B.SIT_MBR_ID = S.SIT_MBR_ID AND A.SRV_NO = B.SRV_NO)) RATE,
              (SELECT COUNT(MBR_ID) FROM REPORT WHERE MBR_ID  = S.SIT_MBR_ID) REPORT
		FROM SITTER S
		WHERE SIT_MBR_ID = #{sit_mbr_id}
	</select>
	
	<!-- ##################################시터서비스########################################### -->
	<!-- 범위 조회 -->
	<select id="getReservationList" resultType="Sitter_revChkVO" parameterType="Sitter_revChkVO">
		SELECT C.SRV_NO, C.MBR_ID, C.SIT_MBR_ID, C.CHI_NO, C.SRV_PAY, C.SRV_STATUS, C.START_DATE, C.END_DATE, C.COUNT, C.SRV_DATE, D.REVIEW FROM
		(SELECT A.SRV_NO, A.MBR_ID, A.SIT_MBR_ID, A.CHI_NO, A.SRV_PAY, A.SRV_STATUS, MIN(A.SRV_DATE) START_DATE, MAX(A.SRV_DATE) END_DATE, COUNT(A.SRV_DATE) COUNT, B.SRV_DATE
		FROM SITTER_REV A, (SELECT SRV_NO, SRV_DATE FROM  SITTER_REV) B 
		WHERE A.SRV_NO = B.SRV_NO 
		GROUP BY A.SRV_NO, A.MBR_ID, A.SIT_MBR_ID, A.CHI_NO, A.SRV_PAY, A.SRV_STATUS, B.SRV_DATE) C, 
		(SELECT SRV_NO, COUNT(SRV_NO) REVIEW FROM SITTER_COM GROUP BY SRV_NO) D
		<where>
			C.SRV_NO = D.SRV_NO(+)
			<if test="sit_mbr_id != null and sit_mbr_id != ''">
				and C.SIT_MBR_ID = #{sit_mbr_id}
			</if>
			<if test="mbr_id != null and mbr_id != ''">
				and C.MBR_ID = #{mbr_id}
			</if>
			<if test="chi_no != null and chi_no != ''">
				and C.CHI_NO = #{chi_no}
			</if>
			<if test="start_date != null and start_date != ''">
				<![CDATA[
				and C.SRV_DATE >= #{start_date}
				]]>
			</if>
			<if test="end_date != null and end_date != ''">
				<![CDATA[
				and C.SRV_DATE <= #{end_date}
				]]>
			</if>
		</where>
	</select>
	
	<!-- 인서트 -->
	<select id="selectReservationKey" resultType="string">
		select SEQ_SITTER_REV_SRV_NO.nextval
			FROM DUAL
	</select>
	<insert id="insertReservation" parameterType="sitter_revVO">
		INSERT INTO SITTER_REV (
	    SRV_NO,
	    MBR_ID,
	    SIT_MBR_ID,
	    CHI_NO,
	    SRV_DATE,
	    SRV_PAY
		)
		VALUES(
		#{srv_no},
	    #{mbr_id},
	    #{sit_mbr_id},
	    #{chi_no},
	    TO_DATE(#{srv_date},'YYYYMMDD'),
	    #{srv_pay}
		)
	</insert>
	
	<!-- 딜리트 -->
	<delete id="deleteReservation" parameterType="sitter_revChkVO">
		DELETE SITTER_REV 
		WHERE SRV_NO = #{srv_no}
	</delete>
	
	<!-- 업데이트(결제여부) -->
	<update id="updateReservationStatus" parameterType="sitter_revChkVO">
		UPDATE SITTER_REV SET
		SRV_STATUS = '결제완료'
		WHERE SRV_NO = #{srv_no}
	</update>
	
	<!-- 후기조회 -->
	<select id="getReviewList" parameterType="Sitter_revChkVO" resultType="Sitter_revChkVO">
		SELECT  B.SC_CONTENT, LPAD('　', SC_RATE+2, '★') SC_RATE FROM
		(SELECT * FROM SITTER_REV 
		WHERE ROWID IN (SELECT MAX(ROWID) FROM SITTER_REV GROUP BY SRV_NO) and SIT_MBR_ID = #{sit_mbr_id} and SRV_STATUS = '결제완료') A, SITTER_COM B
		WHERE A.SRV_NO = B.SRV_NO
	</select>
	
	<!-- ##################################시터 서비스 후기########################################### -->
	
	<!-- 단건조회 -->
	<select id="getReview" parameterType="Sitter_comVO" resultType="Sitter_comVO">
		SELECT * FROM SITTER_COM
		WHERE SRV_NO = #{srv_no}
	</select>
	
	<!-- 인서트 -->
	<insert id="insertReview" parameterType="Sitter_comVO">
		INSERT INTO SITTER_COM (SRV_NO, SC_CONTENT, SC_RATE)
	  	VALUES (#{srv_no}, #{sc_content}, #{sc_rate})
	</insert>
	
	<!-- 업데이트 -->
	<update id="updateReview" parameterType="Sitter_comVO">
	UPDATE SITTER_COM 
	SET SC_CONTENT = #{sc_content}, SC_RATE = #{sc_rate}
	WHERE SRV_NO = #{srv_no}
	</update>
	
	<!-- 딜리트 -->
	<delete id="deleteReview" parameterType="Sitter_comVO">
	DELETE SITTER_COM
	WHERE SRV_NO = #{srv_no}
	</delete>
	
	<!-- ##################################아기########################################### -->
	<!-- 단건조회 -->
	<select id="getChildList" resultType="ChildVO">
		SELECT *
		FROM CHILD
		where mbr_id = #{mbr_id}
	</select>
	
	<!-- ##################################공지사항########################################### -->
	<!-- 전체조회 -->
	<select id="getNoticeList" resultType="NqVO" >
		SELECT NQ_NO, AD_ID, NQ_TITLE, NQ_CATEGORY, NQ_FILE, NQ_DATE, NQ_HIT
		FROM NQ 
		WHERE NQ_CATEGORY = '공지사항'
	</select>
	
	<!-- 단건조회 -->
	<select id="getNotice" resultType="NqVO" >
		SELECT *
		FROM NQ 
		WHERE NQ_CATEGORY = '공지사항'
		AND NQ_NO = #{nq_no}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="noticeHitPlus" parameterType="nqVO">
		UPDATE NQ SET
		NQ_HIT = NQ_HIT + 1
		WHERE NQ_NO = #{nq_no}
	</update>
</mapper>
