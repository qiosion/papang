<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.company.papang.impl.EsMapper">
<!-- 회원가입 -->
	<insert id="insertUser" parameterType="MemberVO">
		INSERT INTO MEMBER (	mbr_id,
								mbr_pw, 
								mbr_name, 
								mbr_birth,
								mbr_email,
<if test="mbr_phone != null and mbr_phone != ''">mbr_phone,</if>
<if test="mbr_post != null and mbr_post != ''">mbr_post, </if>
<if test="mbr_addr1 != null and mbr_addr1 != ''">mbr_addr1, </if>
<if test="mbr_addr2 != null and mbr_addr2 != ''">mbr_addr2,</if>
<if test="mbr_addr3 != null and mbr_addr3 != ''">mbr_addr3,</if>
<if test="mbr_bank != null and mbr_bank != ''">mbr_bank,</if>
<if test="mbr_account != null and mbr_account != ''">mbr_account,</if>
<if test="mbr_pic != null and mbr_pic != ''">mbr_pic,</if>
								mbr_gender )
	 	            VALUES( #{mbr_id},
	 	               		#{mbr_pw},
	 	               		#{mbr_name},
	 	               		#{mbr_birth},
	 	               		#{mbr_email},
<if test="mbr_phone != null and mbr_phone != ''">#{mbr_phone},</if>
<if test="mbr_post != null and mbr_post != ''">#{mbr_post},</if>
<if test="mbr_addr1 != null and mbr_addr1 != ''">#{mbr_addr1},</if>
<if test="mbr_addr2 != null and mbr_addr2 != ''">#{mbr_addr2},</if>
<if test="mbr_addr3 != null and mbr_addr3 != ''">#{mbr_addr3},</if>
<if test="mbr_bank != null and mbr_bank != ''">#{mbr_bank},</if>
<if test="mbr_account != null and mbr_account != ''">#{mbr_account},</if>
<if test="mbr_pic != null and mbr_pic != ''">#{mbr_pic},</if>
	 	               		#{mbr_gender} )
	</insert>
	<!-- 아이디중복체크 -->
	<select id="checkId" parameterType="string" resultType="int">
		SELECT count(*) FROM MEMBER
		WHERE mbr_id = #{mbr_id}
	</select>
	<!-- 닉네임중복체크
	<select id="checkNk" parameterType="string" resultType="int">
		SELECT count(*) FROM MEMBER
		WHERE mbr_nick = #{mbr_nick}
	</select -->
	<!-- 이메일중복체크 -->
	<select id="checkEm" parameterType="string" resultType="int">
		SELECT count(*) FROM MEMBER
		WHERE mbr_email = #{mbr_email}
	</select>
	<!-- 이메일 인증 난수 생성 -->
	<update id="GetKey" parameterType="Map">
		UPDATE MEMBER SET authkey = #{param2}
		WHERE mbr_id = #{param1}
	</update>
	<!-- 이메일 인증완료시 Y -->
	<update id="alter_authkey" parameterType="Map">
		UPDATE MEMBER SET authkey = 'Y'
		WHERE mbr_id = #{param1}
		AND authkey = #{param2}
	</update>

<!-- =========================================================== -->
<!-- 로그인 -->
	<!-- 일반회원 -->
	<select id="login" resultType="MemberVO">
		SELECT *
		FROM MEMBER
		WHERE mbr_id = #{mbr_id}
		  AND mbr_pw = #{mbr_pw}
	</select>
	<!-- 관리자 -->
	<select id="adminLogin" resultType="AdminVO">
		SELECT *
		FROM ADMIN
		WHERE ad_id = #{ad_id}
		  AND ad_pw = #{ad_pw}
	</select>
<!-- =========================================================== -->	
<!-- 로그인 비번체크 -->
	<!-- 일반회원 -->
	<select id="loginCheck" resultType="string">
		SELECT mbr_pw
		FROM MEMBER
		WHERE mbr_id = #{mbr_id}
	</select>
	<!-- 관리자 -->
	<select id="adminLoginCheck" resultType="string">
		SELECT ad_pw
		FROM ADMIN
		WHERE ad_id = #{ad_id}
	</select>
<!-- =========================================================== -->
<!-- 로그인시 유효아이디체크..  -->
	<!-- 일반회원 -->
	<select id="loginChk" resultType="string">
		SELECT count(*)
		FROM MEMBER
		WHERE mbr_id = #{mbr_id}
	</select>
<!-- =========================================================== -->
<!-- 활동정지 체크 -->
	<!-- 일반회원 -->
	<select id="stChk" resultType="Report_info">
		SELECT RINFO_START+RINFO_CNT as rinfo_start,  rinfo_reason
		FROM REPORT_INFO
		WHERE mbr_id = #{mbr_id}
	</select>
<!-- =========================================================== -->
<!-- 아이디 비번 찾기 -->
	<!-- 아이디 -->
	<select id="findId" resultType="string">
		SELECT mbr_id FROM member
		WHERE mbr_name = #{mbr_name}
		AND mbr_email = #{mbr_email}
	</select>
	<!-- 비번 임시발급-->
	<select id="findPw" resultType="string">
		UPDATE member
		SET mbr_pw = #{param3}
		WHERE mbr_id = #{param1}
		AND mbr_email = #{param2}
	</select>
<!-- =========================================================== -->
<!-- 카카오.. -->
	<!-- 아이디 체크 -->
	<select id="kakaoCheck" parameterType="string" resultType="int">
		SELECT count(*) FROM MEMBER
		WHERE mbr_id = #{kid}
	</select>
	<!-- 카카오 추가정보 기입 (회원가입) -->
	<insert id="insertKakaoUser" parameterType="MemberVO">
		INSERT INTO MEMBER (	mbr_id,
								mbr_name, 
								mbr_birth,
								mbr_email,
<if test="mbr_phone != null and mbr_phone != ''">mbr_phone,</if>
<if test="mbr_post != null and mbr_post != ''">mbr_post, </if>
<if test="mbr_addr1 != null and mbr_addr1 != ''">mbr_addr1, </if>
<if test="mbr_addr2 != null and mbr_addr2 != ''">mbr_addr2,</if>
<if test="mbr_addr3 != null and mbr_addr3 != ''">mbr_addr3,</if>
<if test="mbr_pic != null and mbr_pic != ''">mbr_pic,</if>
								mbr_gender )
	 	            VALUES( #{mbr_id},
	 	               		#{mbr_name},
	 	               		#{mbr_birth},
	 	               		#{mbr_email},
<if test="mbr_phone != null and mbr_phone != ''">#{mbr_phone},</if>
<if test="mbr_post != null and mbr_post != ''">#{mbr_post},</if>
<if test="mbr_addr1 != null and mbr_addr1 != ''">#{mbr_addr1},</if>
<if test="mbr_addr2 != null and mbr_addr2 != ''">#{mbr_addr2},</if>
<if test="mbr_addr3 != null and mbr_addr3 != ''">#{mbr_addr3},</if>
<if test="mbr_pic != null and mbr_pic != ''">#{mbr_pic},</if>
	 	               		#{mbr_gender} )
	</insert>
	<!-- 카카오 로그인 -->
	<select id="kLogin" resultType="MemberVO">
		SELECT *
		FROM MEMBER
		WHERE mbr_id = #{mbr_id}
	</select>
<!-- =========================================================== -->
<!-- 판매상품 -->
	<!-- 단건조회  -->
	<select id="getItem" parameterType="ProductVO" resultType="ProductVO">
		SELECT *
		FROM PRODUCT
		WHERE pro_no = #{pro_no}
	</select>
	
	<!-- 전체조회  -->	
	<select id="getItemList" resultType="ProductVO">
		SELECT pro_no, pro_name, pro_price, pro_pic, pro_cnt
		FROM PRODUCT	  
		ORDER BY pro_no DESC 
	</select>
	<!-- 전체조회  -->	
	<select id="getItemListPriceDesc" resultType="ProductVO">
		SELECT * 
		FROM PRODUCT	  
		ORDER BY pro_price DESC 
	</select>
	
	<!--  글등록    -->
	<insert id="insertItem" parameterType="ProductVO">
		INSERT INTO PRODUCT (	
								pro_name, 
								pro_price, 
								pro_pic,
								pro_detail,
								pro_cc )
	 	            VALUES( 
	 	               		#{pro_name},
	 	               		#{pro_price},
	 	               		#{pro_pic},
	 	               		#{pro_detail},
	 	               		#{pro_cc} )
	</insert>
	<!--  글수정    -->
	<update id="updateItem" parameterType="ProductVO">
		UPDATE PRODUCT SET  pro_name = #{pro_name}, 
							pro_price = #{pro_price},
							pro_detail = #{pro_detail},
							<if test="pro_pic != null and pro_pic != ''">pro_pic = #{pro_pic},</if>
							pro_cc = #{pro_cc}
		WHERE pro_no = #{pro_no}
					
	</update>
	<!-- 삭제 -->
	<delete id="deleteItem" parameterType="ProductVO">
		DELETE PRODUCT
		WHERE pro_no = #{pro_no}
	</delete>

<!-- =========================================================== -->
<!-- 장터 -->
	<!-- 전체조회  -->	
	<select id="getUsedList" resultType="UsedVO">
		SELECT rownum, u.*
		FROM USED u
		<where>
			<![CDATA[ rownum <= 100 ]]>
			<if test="used_loc == '전체'">
				and 1 = 1
			</if>
			<if test="used_loc != null and used_loc != '' and used_loc != '전체'">
				and used_loc = #{used_loc}
			</if>
		</where>
		ORDER BY used_no 
	</select>
	<!-- 판매중인 상품 조회  -->	
	<select id="onSaleUsedList" resultType="UsedVO">
		SELECT * 
		FROM USED
		<where>
			<![CDATA[ rownum <= 100 ]]>
			<if test="used_loc == '전체'">
				and 1 = 1
			</if>
			<if test="used_loc != null and used_loc != '' and used_loc != '전체'">
				and used_loc = #{used_loc}
			</if>
		</where>
		and used_category = '판매중'
		
		ORDER BY used_no 
	</select>

	<!-- 단건조회  -->
	<select id="getUsed" parameterType="UsedVO" resultType="UsedVO">
		SELECT *
		FROM USED
		WHERE used_no = #{used_no}
	</select>
	
	<!--  글등록    -->
	<insert id="insertUsed" parameterType="UsedVO">
		INSERT INTO USED (	
							mbr_id, 
							used_title, 
							used_loc,
							<if test="used_pic != null and used_pic != ''">used_pic,</if>
							used_price,
							used_content )
	 	            VALUES( 
	 	               		#{mbr_id},
	 	               		#{used_title},
	 	               		#{used_loc},
	 	               		<if test="used_pic != null and used_pic != ''">#{used_pic},</if>
	 	               		#{used_price},
	 	               		#{used_content} )
	</insert>
	<!--  글수정    -->
	<update id="updateUsed" parameterType="UsedVO">
		UPDATE USED SET		used_title = #{used_title}, 
							used_category = #{used_category},
							used_loc = #{used_loc},
							<if test="used_pic != null and used_pic != ''">used_pic = #{used_pic},</if>
							used_price = #{used_price},
							used_content = #{used_content}
		WHERE used_no = #{used_no}
					
	</update>
	<!-- 삭제 -->
	<delete id="deleteUsed" parameterType="UsedVO">
		DELETE USED
		WHERE used_no = #{used_no}
	</delete>
	
	<!-- 조회수 -->
	<update id="hitPlus" parameterType="UsedVO">
		UPDATE USED
		SET	used_hit = used_hit + 1
		WHERE used_no = #{used_no}
	</update>
<!-- =========================================================== -->
<!-- 댓글 -->
	<select id="getUsedCommList" resultType="Used_comVO" parameterType="Used_comVO">
		SELECT ROWNUM, u.*
		FROM used_com u
		<where>
			<![CDATA[
				ROWNUM <= 100
			]]>
				AND u.used_no = #{used_no}
		</where>
		ORDER BY u.uc_no DESC
	</select>
	
	<!-- 커뮤니티 댓글 등록 -->
	<insert id="usedCommInsert" parameterType="Used_comVO">
		INSERT INTO used_com (	uc_no,
    							mbr_id,
    							uc_content,
    							used_no
							)
		VALUES(	SEQ_USED_COM_uc_no.nextval,
				#{mbr_id},
				#{uc_content},
				#{used_no}
		)
	</insert>

<!-- =========================================================== -->
<!-- 장바구니 -->
	<!-- 전체조회  -->	
	<select id="getCartList" resultType="BagVO">
		<!-- SELECT b.mbr_id, b.pro_no, b.bag_cnt, p.pro_name, p.pro_price, p.pro_pic
		FROM BAG b, PRODUCT p	
		WHERE b.pro_no = p.pro_no
		ORDER BY pro_no -->
		SELECT b.bag_no, b.mbr_id, b.pro_no, b.bag_cnt, p.pro_name, p.pro_price, p.pro_pic
		FROM BAG b
		INNER JOIN PRODUCT p
		ON b.pro_no = p.pro_no
		WHERE b.mbr_id =  #{mbr_id}
	</select>
	<!-- 장바구니 중복체크 -->
	<select id="countCart" resultType="int">
		SELECT count(*) FROM BAG
		WHERE pro_no = #{param1}
		AND mbr_id = #{param2}
		 
	</select>
	<!--  장바구니 추가    -->
	<insert id="insertCart" parameterType="BagVO">
		INSERT INTO BAG (	
							mbr_id,
							pro_no, 
							bag_cnt )
	 	            VALUES(	
	 	            		#{mbr_id},
	 	               		#{pro_no},
	 	               		#{bag_cnt} )
	</insert>
	<!--  수량 수정    -->
	<update id="updateCart" parameterType="BagVO">
		UPDATE BAG SET bag_cnt = #{bag_cnt}
		WHERE pro_no = #{pro_no}
	</update>
	<!-- 삭제 -->
	<delete id="deleteCart" parameterType="BagVO">
		DELETE BAG
		WHERE bag_no = #{bag_no}
		AND mbr_id = #{mbr_id}
	</delete>
<!-- =========================================================== -->
<!-- 전체 주문 -->
	<!-- 주문후 상품재고 변경 -->
	<update id="updateProCnt" parameterType="string">
		UPDATE PRODUCT
		SET pro_cnt = (
						SELECT #{pro_cnt}-bag_cnt
						FROM BAG
						WHERE mbr_id = #{mbr_id}
					)
		WHERE pro_no = #{pro_no};
	</update>
	<!-- 주문후 재고 테이블에서 출고내역 등록 -->
	<insert id="minusWareCnt">
		INSERT INTO WAREHOUSING ( PRO_NO, WARE_CNT, WARE_CATEGORY )
			SELECT pro_no, -bag_cnt, '출고'
			FROM BAG WHERE mbr_id = #{mbr_id}
	</insert>
	
	<!-- 주문정보 입력 -->
	<insert id="orderInfo">
		INSERT INTO ORDER_INFO (order_no, mbr_id, order_sum) <!-- 운송장번호 아직 -->
					VALUES ( #{order_no},
							 #{mbr_id},
							 #{order_sum} )
	</insert>
	<!-- 주문상세정보 입력 -->
	<insert id="orderDetail">
		INSERT INTO ORDER_DETAIL (od_detail_no, order_no, pro_no, bag_cnt)
			SELECT seq_order_detail_od_detail_no.nextval, #{order_no}, pro_no, bag_cnt
		FROM BAG WHERE mbr_id = #{mbr_id}
	</insert>
	
	<!-- 주문후 장바구니 비우기 -->
	<delete id="deleteAllCart">
		DELETE BAG
		WHERE mbr_id = #{mbr_id}
	</delete>
</mapper>
